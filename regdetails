#!/usr/bin/env python

# -----------------------------------------------------------------------
# regdetails.py
# Author: Edward and Bharat
# -----------------------------------------------------------------------

from os import path
from sys import argv, stderr, exit
from sqlite3 import connect


def buildStr(argv):
    print(argv)
    # details = ''
    length = len(argv)
    for i in range(length):
        if loopskip or i == 0:
            loopskip = 0
            continue
        if argv[i] == '-h' and i == 1:
            continue
        try:
            details = argv[i + 1]
            loopskip = 1
            continue
        except:
            print('reg: missing value')
            exit(1)

        print(argv[i])
        raise SyntaxError
    return classid


def selectStr():
    # Create a prepared statement and substitute values.
    stmtStr = 'SELECT ' + \
              'classes.courseid, classes.days, classes.starttime, classes.endtime, classes.bldg, ' + \
              'classes.roomnum, ' + \
              'crosslistings.courseid, crosslistings.coursenum, crosslistings.dept,' + \
              'courses.area, courses.title, courses.courseid,courses.description ,courses.prereqs,' + \
              'profs.profid, profs.profname' + \
              'FROM classes, crosslistings, courses, courseprofs, profs' + \
              'WHERE classes.courseid = courses.courseid' + \
              'AND classes.courseid = crosslistings.courseid' + \
              'AND classes.courseid = courseprofs.courseid' + \
              'AND courseprofs.profid = profs.profid ' + \
              'AND classes.classid = ? '
    return stmtStr


def outputStr(row):
    print('Class ID:', str(row[0]))
    print('Class Dept:', str(row[1]))
    print('Course Num:', str(row[2]))
    print('Area:', str(row[3]))
    title = 'Title: ' + str(row[4])
    if len(title) > 72:
        concat = title.rfind(' ', 0, 68)
        title = title[0:concat]
        title = title + ' ... '
    print(title)
    print()


def stdStr(row):
    output = str(row[0]) + '\t' + \
             str(row[1]) + '\t' + \
             str(row[2]) + '\t' + \
             str(row[3]) + '\t' + \
             str(row[4]) + '\t'
    print(output)


def main(argv):
    DATABASE_NAME = 'reg.sqlite'

    if not path.isfile(DATABASE_NAME):
        raise Exception('regdetails: database reg.sqlite not found')

    connection = connect(DATABASE_NAME)
    cursor = connection.cursor()

    stmtStr = selectStr()
    if argv[1] == '-h':
        cursor.execute(stmtStr, argv[2])
    else:
        cursor.execute(stmtStr, argv[1])

    stmtStr += 'ORDER BY coursenum '


    row = cursor.fetchone()
    while row is not None:
        if argv[1] == '-h':
            outputStr(row)
        else:
            stdStr(row)
        row = cursor.fetchone()

    cursor.close()
    connection.close()


if __name__ == '__main__':
    main(argv)

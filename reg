#!/usr/bin/env python

# -----------------------------------------------------------------------
# reg.py
# Author: Bob Dondero
# -----------------------------------------------------------------------

from os import path
from sys import argv, stderr, exit
from sqlite3 import connect

# -----------------------------------------------------------------------
def buildStr(argv):
  dept = coursenum = area = title = loopskip = 0
  deptVal = coursenumVal = areaVal = titleVal = ''
  length = len(argv)
  for i in range(length):
    if (loopskip):
      loopskip = 0
      continue
    if argv[i] == '-dept' and dept == 1:
        raise ValueError
    elif argv[i] == "-dept":
        dept = 1
        try:
          deptVal = argv[i+1]
          loopskip = 1
          print (deptVal)
          continue
        except:
          print('Missing value')
    if argv[i] == '-coursenum' and coursenum == 1:
        raise ValueError
    elif argv[i] == "-coursenum":
        coursenum = 1
        try:
          coursenumVal = argv[i+1]
          loopskip = 1
          print (coursenumVal)
          continue
        except:
          print('Missing value')
    if argv[i] == '-area' and area == 1:
        raise ValueError
    elif argv[i] == "-area":
        area = 1
        try:
          areaVal = argv[i+1]
          loopskip = 1
          print (areaVal)
          continue
        except:
          print('Missing value')
    if argv[i] == '-title' and title == 1:
        raise ValueError
    elif argv[i] == "-title":
        title = 1
        try:
          titleVal = argv[i+1]
          loopskip = 1
          print (titleVal)
          continue
        except:
          print('Missing value')

    print(str(dept) + '_' + str(coursenum) +'_' + str(area) + '_' + str(title))
    return[dept, coursenum, area, title, deptVal, coursenumVal, areaVal, titleVal]

def selectStr(params):


    # Create a prepared statement and substitute values.
    stmtStr = 'SELECT classid, dept, coursenum, area, title ' + \
              'FROM crosslistings, classes, courses ' + \
              'WHERE classes.courseid = courses.courseid ' + \
              'AND classes.courseid = crosslistings.courseid'

    return stmtStr

def main(argv):
    DATABASE_NAME = 'reg.sqlite'

    if not path.isfile(DATABASE_NAME):
        raise Exception('Database connection failed')

    try:
        param = buildStr(argv)

    except ValueError:
        print('Duplicate key')

    connection = connect(DATABASE_NAME)
    cursor = connection.cursor()

    stmtStr = selectStr(param)
    cursor.execute(stmtStr)

    row = cursor.fetchone()
    while row is not None:
        print('Class ID:', str(row[0]))
        print('Class Title:', str(row[1]))
        print('Quantity:', str(row[2]))
        print()
        row = cursor.fetchone()

    cursor.close()
    connection.close()

if __name__ == '__main__':
    main(argv)
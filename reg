#!/usr/bin/env python

# -----------------------------------------------------------------------
# reg.py
# Author: Edward and Bharat
# -----------------------------------------------------------------------

from os import path
from sys import argv, stderr, exit
from sqlite3 import connect

# -----------------------------------------------------------------------
def buildStr(argv):
  print (argv)
  dept = coursenum = area = title = loopskip = 0
  deptVal = coursenumVal = areaVal = titleVal = ''
  length = len(argv)
  print(length)
  for i in range(length):
      if loopskip:
          loopskip = 0
          continue
      if argv[i] == '-dept' and dept == 1:
          raise ValueError
      elif argv[i] == "-dept":
          dept = 1
          try:
              deptVal = argv[i+1]
              loopskip = 1
              print (deptVal)
              continue
          except:
              print('Missing value')
      if argv[i] == '-coursenum' and coursenum == 1:
          raise ValueError
      elif argv[i] == "-coursenum":
          coursenum = 1
          try:
              coursenumVal = argv[i+1]
              loopskip = 1
              print (coursenumVal)
              continue
          except:
              print('Missing value')
      if argv[i] == '-area' and area == 1:
            raise ValueError
      elif argv[i] == "-area":
          area = 1
          try:
              areaVal = argv[i+1]
              loopskip = 1
              print (areaVal)
              continue
          except:
              print('Missing value')
      if argv[i] == '-title' and title == 1:
          raise ValueError
      elif argv[i] == "-title":
          title = 1
          try:
              titleVal = argv[i+1]
              loopskip = 1
              print (titleVal)
              continue
          except:
              print('Missing value')

  return[dept, coursenum, area, title, deptVal, coursenumVal, areaVal, titleVal]

def selectStr(param):


    # Create a prepared statement and substitute values.
    stmtStr = 'SELECT classid, dept, coursenum, area, title ' + \
              'FROM crosslistings, classes, courses ' + \
              'WHERE classes.courseid = courses.courseid ' + \
              'AND classes.courseid = crosslistings.courseid '

    return stmtStr

def outputStr(row):
    print('Class ID:', str(row[0]))
    print('Class Dept:', str(row[1]))
    print('Course Num:', str(row[2]))
    print('Area:', str(row[3]))
    print('Title:', str(row[4]))
    print()

def main(argv):
    DATABASE_NAME = 'reg.sqlite'

    if not path.isfile(DATABASE_NAME):
        raise Exception('Database connection failed')

    try:
        param = buildStr(argv)

    except ValueError:
        print('Duplicate key')

    connection = connect(DATABASE_NAME)
    cursor = connection.cursor()

    stmtStr = selectStr(param)
    values = []
    if (param[0]): # dept is true
        param[4] = "%" + param[4] + "%"
        stmtStr += "AND dept LIKE ? "
        values.append(param[4])

    if (param[1]): # coursenum is true
        param[5] = "%" + param[5] + "%"
        stmtStr += "AND coursenum LIKE ? "
        values.append(param[5])

    if (param[2]): # area is true
        param[6] = "%" + param[6] + "%"
        stmtStr += "AND area LIKE ? "
        values.append(param[6])

    if (param[3]): # title is true
        param[7] = "%" + param[7] + "%"
        stmtStr += "AND title LIKE ? "
        values.append(param[7])

    cursor.execute(stmtStr, values)

    row = cursor.fetchone()
    while row is not None:
        outputStr(row)
        row = cursor.fetchone()

    cursor.close()
    connection.close()

if __name__ == '__main__':
    main(argv)
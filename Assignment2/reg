#!/usr/bin/env python

# -----------------------------------------------------------------------
# reg.py
# Author: Edward and Bharat
# -----------------------------------------------------------------------

from os import path
from sys import argv, stderr, exit
from sqlite3 import connect
import regdetails

#import GUI widgets
from sys import exit
from PyQt5.QtWidgets import QApplication, QPushButton, QGridLayout
from PyQt5.QtWidgets import QMainWindow, QFrame, QDesktopWidget, QListWidgetItem
from PyQt5.QtWidgets import QLineEdit, QLabel, QListWidget, QMessageBox

# -----------------------------------------------------------------------
def buildStr(argv):
    dept = coursenum = area = title = loopskip = 0
    deptVal = coursenumVal = areaVal = titleVal = ''
    length = len(argv)
    for i in range(length):
        if loopskip or i == 0:
            loopskip = 0
            continue
        if argv[i] == '-h' and i == 1:
            continue
        if argv[i] == '-dept' and dept == 1:
            raise ValueError
        elif argv[i] == "-dept":
            dept = 1
            try:
                deptVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        if argv[i] == '-coursenum' and coursenum == 1:
            raise ValueError
        elif argv[i] == "-coursenum":
            coursenum = 1
            try:
                coursenumVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        if argv[i] == '-area' and area == 1:
            raise ValueError
        elif argv[i] == "-area":
            area = 1
            try:
                areaVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        if argv[i] == '-title' and title == 1:
            raise ValueError
        elif argv[i] == "-title":
            title = 1
            try:
                titleVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        print(argv[i])
        raise SyntaxError

    return [dept, coursenum, area, title, deptVal, coursenumVal, areaVal, titleVal]


def selectStr(param):
    # Create a prepared statement and substitute values.
    stmtStr = 'SELECT classid, dept, coursenum, area, title ' + \
              'FROM crosslistings, classes, courses ' + \
              'WHERE classes.courseid = courses.courseid ' + \
              'AND classes.courseid = crosslistings.courseid '
    return stmtStr


def outputStr(row):
    sb = []
    sb.append('Class ID:' + str(row[0]))
    sb.append('Class Dept:' + str(row[1]))
    sb.append('Course Num:'+ str(row[2]))
    sb.append('Area:' + str(row[3]))
    title = 'Title: ' + str(row[4])
    if len(title) > 72:
        concat = title.rfind(' ', 0, 68)
        title = title[0:concat]
        title = title + ' ... '
    sb.append(title)
    return ''.join(sb)

def stdStr(row):
    output = str(row[0]) + '  \t' + \
             str(row[1]) + '\t\t' + \
             str(row[2]) + '\t\t' + \
             str(row[3]) + '\t\t' + \
             str(row[4])
    return(output)

def managedb(argv):
    DATABASE_NAME = 'reg.sqlite'
    sb = []

    if not path.isfile(DATABASE_NAME):
        raise Exception('reg: database reg.sqlite not found')

    try:
        param = buildStr(argv)

    except ValueError:
        print('reg: duplicate key')
        exit(1)
    except SyntaxError:
        print('reg: invalid key')
        exit(1)

    connection = connect(DATABASE_NAME)
    cursor = connection.cursor()

    stmtStr = selectStr(param)
    values = []
    if param[0]:  # dept is true
        param[4] = "%" + param[4] + "%"
        stmtStr += "AND dept LIKE ? "
        values.append(param[4])

    if param[1]:  # coursenum is true
        param[5] = "%" + param[5] + "%"
        stmtStr += "AND coursenum LIKE ? "
        values.append(param[5])

    if param[2]:  # area is true
        param[6] = "%" + param[6] + "%"
        stmtStr += "AND area LIKE ? "
        values.append(param[6])

    if param[3]:  # title is true
        param[7] = "%" + param[7] + "%"
        stmtStr += "AND title LIKE ? "
        values.append(param[7])

    stmtStr += 'ORDER BY coursenum '

    cursor.execute(stmtStr, values)

    row = cursor.fetchone()
    while row is not None:
        output = stdStr(row)
        # if len(argv) > 1 and argv[1] == '-h' and len(output) > 100:
        #     concat = output.rfind(' ', 0, 68)
        #     output = output[0:concat]
        #     output = output + ' ... '

        sb.append(output)
        row = cursor.fetchone()

    cursor.close()
    connection.close()
    return sb

def main(argv):
    app = QApplication([])
    button = QPushButton('Search Courses')
    listWidget = QListWidget()

    LineEdit1 = QLineEdit('')
    LineEdit2 = QLineEdit('')
    LineEdit3 = QLineEdit('')
    LineEdit4 = QLineEdit('')

    deptLabel = QLabel('Department:')
    coursenumLabel = QLabel('Course Num:')
    areaLabel = QLabel('Area:')
    titleLabel = QLabel('Title:')


    outputLayout = QGridLayout()
    outputLayout.setRowStretch(0, 0)
    outputLayout.setColumnStretch(0, 0)
    outputLayout.addWidget(button, 0, 0)
    outputLayout.addWidget(listWidget, 1, 0)
    outputFrame = QFrame()
    outputFrame.setLayout(outputLayout)

    inputLayout = QGridLayout()
    inputLayout.addWidget(deptLabel, 0, 1)
    inputLayout.addWidget(coursenumLabel, 1, 1)
    inputLayout.addWidget(areaLabel, 2, 1)
    inputLayout.addWidget(titleLabel, 3, 1)
    inputLayout.addWidget(LineEdit1, 0, 2)
    inputLayout.addWidget(LineEdit2, 1, 2)
    inputLayout.addWidget(LineEdit3, 2, 2)
    inputLayout.addWidget(LineEdit4, 3, 2)
    inputFrame = QFrame()
    inputFrame.setLayout(inputLayout)

    FrameLayout = QGridLayout()
    FrameLayout.setContentsMargins(0, 0, 0, 0)
    FrameLayout.setRowStretch(0, 1)
    FrameLayout.setColumnStretch(0, 1)
    FrameLayout.addWidget(outputFrame, 0, 0)
    FrameLayout.addWidget(inputFrame, 0, 1)
    Frame = QFrame()
    Frame.setLayout(FrameLayout)

    window = QMainWindow()
    window.setWindowTitle('Search the Course Registrar')
    window.setCentralWidget(Frame)
    screenSize = QDesktopWidget().screenGeometry()
    window.resize(screenSize.width() // 2, screenSize.height() // 2)

    def buttonSlot():
        listWidget.clear()
        args = [argv[0]]
        args.append("-h")
        if LineEdit1.text() != '':
            args.append('-dept')
            args.append(LineEdit1.text())
        if LineEdit2.text() != '':
            args.append('-coursenum')
            args.append(LineEdit2.text())
        if LineEdit3.text() != '':
            args.append('-area')
            args.append(LineEdit3.text())
        if LineEdit4.text() != '':
            args.append('-title')
            args.append(LineEdit4.text())

        output = managedb(args)
        for item in output:
            listWidget.addItem(item)

        def handleClick():
            item = listWidget.currentItem()
            text = item.text()
            itemcoursenum = text[0:text.index('\t')]
            finalStr = regdetails.runDetails(['regdetails', '-h', itemcoursenum])
            reply = QMessageBox.information(window, 'My title', finalStr)

        listWidget.itemActivated.connect(handleClick)
        window.show()

    button.clicked.connect(buttonSlot)
    LineEdit1.returnPressed.connect(buttonSlot)
    LineEdit2.returnPressed.connect(buttonSlot)
    LineEdit3.returnPressed.connect(buttonSlot)
    LineEdit4.returnPressed.connect(buttonSlot)

    window.show()
    exit(app.exec_())


if __name__ == '__main__':
    main(argv)


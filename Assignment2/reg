#!/usr/bin/env python

# -----------------------------------------------------------------------
# reg.py
# Author: Edward and Bharat
# -----------------------------------------------------------------------

from os import path
from sys import argv, stderr, exit
from sqlite3 import connect

#import GUI widgets
from sys import exit
from PyQt5.QtWidgets import QApplication, QPushButton, QGridLayout
from PyQt5.QtWidgets import QMainWindow, QFrame, QDesktopWidget
from PyQt5.QtWidgets import QTextEdit, QMessageBox

# -----------------------------------------------------------------------
def buildStr(argv):
    dept = coursenum = area = title = loopskip = 0
    deptVal = coursenumVal = areaVal = titleVal = ''
    length = len(argv)
    for i in range(length):
        if loopskip or i == 0:
            loopskip = 0
            continue
        if argv[i] == '-h' and i == 1:
            continue
        if argv[i] == '-dept' and dept == 1:
            raise ValueError
        elif argv[i] == "-dept":
            dept = 1
            try:
                deptVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        if argv[i] == '-coursenum' and coursenum == 1:
            raise ValueError
        elif argv[i] == "-coursenum":
            coursenum = 1
            try:
                coursenumVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        if argv[i] == '-area' and area == 1:
            raise ValueError
        elif argv[i] == "-area":
            area = 1
            try:
                areaVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        if argv[i] == '-title' and title == 1:
            raise ValueError
        elif argv[i] == "-title":
            title = 1
            try:
                titleVal = argv[i + 1]
                loopskip = 1
                continue
            except:
                print('reg: missing value')
                exit(1)
        print(argv[i])
        raise SyntaxError

    return [dept, coursenum, area, title, deptVal, coursenumVal, areaVal, titleVal]


def selectStr(param):
    # Create a prepared statement and substitute values.
    stmtStr = 'SELECT classid, dept, coursenum, area, title ' + \
              'FROM crosslistings, classes, courses ' + \
              'WHERE classes.courseid = courses.courseid ' + \
              'AND classes.courseid = crosslistings.courseid '
    return stmtStr


def outputStr(row):
    print('Class ID:', str(row[0]))
    print('Class Dept:', str(row[1]))
    print('Course Num:', str(row[2]))
    print('Area:', str(row[3]))
    title = 'Title: ' + str(row[4])
    if len(title) > 72:
        concat = title.rfind(' ', 0, 68)
        title = title[0:concat]
        title = title + ' ... '
    print(title)
    print()


def stdStr(row):
    output = str(row[0]) + '\t' + \
             str(row[1]) + '\t' + \
             str(row[2]) + '\t' + \
             str(row[3]) + '\t' + \
             str(row[4])
    return(output)

def managedb(argv):
    DATABASE_NAME = 'reg.sqlite'

    if not path.isfile(DATABASE_NAME):
        raise Exception('reg: database reg.sqlite not found')

    try:
        param = buildStr(argv)

    except ValueError:
        print('reg: duplicate key')
        exit(1)
    except SyntaxError:
        print('reg: invalid key')
        exit(1)

    connection = connect(DATABASE_NAME)
    cursor = connection.cursor()

    stmtStr = selectStr(param)
    values = []
    if param[0]:  # dept is true
        param[4] = "%" + param[4] + "%"
        stmtStr += "AND dept LIKE ? "
        values.append(param[4])

    if param[1]:  # coursenum is true
        param[5] = "%" + param[5] + "%"
        stmtStr += "AND coursenum LIKE ? "
        values.append(param[5])

    if param[2]:  # area is true
        param[6] = "%" + param[6] + "%"
        stmtStr += "AND area LIKE ? "
        values.append(param[6])

    if param[3]:  # title is true
        param[7] = "%" + param[7] + "%"
        stmtStr += "AND title LIKE ? "
        values.append(param[7])

    stmtStr += 'ORDER BY coursenum '

    cursor.execute(stmtStr, values)

    if len(argv) > 1 and argv[1] == '-h':
        print('ID:\tDept:\tNum:\tArea:\tTitle:')
    row = cursor.fetchone()
    while row is not None:
        output = stdStr(row)
        if len(argv) > 1 and argv[1] == '-h' and len(output) > 72:
            concat = output.rfind(' ', 0, 68)
            output = output[0:concat]
            output = output + ' ... '
        print(output)
        row = cursor.fetchone()

    cursor.close()
    connection.close()


def main(argv):
    app = QApplication([])
    button = QPushButton('Search Courses')

    textEdit = QTextEdit()

    layout = QGridLayout()
    layout.addWidget(button, 0, 0)
    layout.addWidget(textEdit, 1, 0)
    layout.setRowStretch(0, 0)
    layout.setRowStretch(1, 1)

    frame = QFrame()
    frame.setLayout(layout)


    window = QMainWindow()
    window.setWindowTitle('Search the Course Registrar')
    window.setCentralWidget(frame)
    screenSize = QDesktopWidget().screenGeometry()
    window.resize(screenSize.width() // 2, screenSize.height() // 2)

    def buttonSlot():

        text = 'testing this output!!!'  # Unused!!!
        textEdit.append(text)

    button.clicked.connect(buttonSlot)

    window.show()
    exit(app.exec_())


if __name__ == '__main__':
    main(argv)
